Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Compare Database
Option Explicit

'AccUnit:TestClass

'--------------------------------------------------------------------
' AccUnit Infrastructure
'--------------------------------------------------------------------
Dim c_Watchstop As clsStopWatch

Private Declare Sub apiSleep Lib "kernel32" Alias "Sleep" (ByVal dwMilliseconds As Long)

Implements SimplyVBUnit.ITestFixture
Implements AccUnit_Integration.ITestManagerBridge
Private TestManager As AccUnit_Integration.TestManager
Private Sub ITestManagerBridge_InitTestManager(ByVal NewTestManager As AccUnit_Integration.ITestManagerComInterface): Set TestManager = NewTestManager: End Sub
Private Function ITestManagerBridge_GetTestManager() As AccUnit_Integration.ITestManagerComInterface: Set ITestManagerBridge_GetTestManager = TestManager: End Function
Private Sub ITestFixture_AddTestCases(ByVal Tests As SimplyVBUnit.TestCaseCollector): TestManager.AddTestCases Tests: End Sub



Public Sub HasFrequency()
  Set c_Watchstop = Utils.StopWatch
  
  Assert.That c_Watchstop.Frequency, Iz.GreaterThan(1)      ' more than once in a millisecond
  
End Sub

Public Sub MinimumResolution()
  Dim cElapsed As Currency
  
  Set c_Watchstop = Utils.StopWatch
  cElapsed = c_Watchstop.Elapsedms
  
  Assert.That cElapsed, Iz.GreaterThan(0)
  Assert.That cElapsed, Iz.LessThan(1)
End Sub

Public Sub SleepOneSecond()
  Dim cElapsed As Currency
  
  Set c_Watchstop = Utils.StopWatch
  apiSleep 1000
  cElapsed = c_Watchstop.Elapsedms
  
  Assert.That cElapsed, Iz.GreaterThan(0)
  Assert.That cElapsed, Iz.InRange(990, 1010)

End Sub

' ------------------------------------------------------------------------

' Measure Overhead including logging !!
Public Sub Overhead_for_stacked_StopWatch()
  Dim Log As New clsLogSaver_Console
  Dim t1 As Currency
  Dim t2 As Currency
  
  Logger.LogSaver.KillAll
  Log.StartLog
    With Utils.StopWatch("Outer Watch")
      With Utils.StopWatch("Inner Watch")
        apiSleep 1000
        t1 = .Elapsedms
      End With
      t2 = .Elapsedms
    End With
  Log.StopLog
  
  Assert.That (t2 - t1), Iz.LessThan(1), "should be less than 1 msec"
End Sub

' ------------------------------------------------------------------------

Public Sub Measure_Long_Assignment()
  Const LOOPS = 100000
  Dim l As Long
  Dim Value As Long
  Dim lDuration   As Currency
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      Value = 1
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "Longs:   " & Int(LOOPS / (lDuration / 1000#)) & " 1/Sec"
  
End Sub

Public Sub Measure_String_Assignment()
  Const LOOPS = 100000
  Dim l As Long
  
  Dim Value As String
  Dim lDuration   As Currency
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      Value = "1"
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "Strings: " & Int(LOOPS / (lDuration / 1000#)) & " 1/Sec"
  
End Sub


Public Sub Measure_Object_Assignment()
  Const LOOPS = 100000
  Dim l As Long
  
  Dim obj As Object
  Dim Value As Object
  
  Dim lDuration   As Currency
  
  Set obj = New clsDateTime
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      Set Value = obj
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "Objects: " & Int(LOOPS / (lDuration / 1000#)) & " 1/Sec"
  
End Sub

Public Sub Measure_Object_Creation()
  Const LOOPS = 100000
  Dim l As Long
  
  Dim Value As Object
  Dim lDuration   As Currency
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      Set Value = New clsDateTime
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "Objects: " & Int(LOOPS / (lDuration / 1000#)) & " 1/Sec"
  
End Sub