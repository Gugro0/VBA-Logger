Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : clsLogger_Test
' Author    : K.Gundermann + Paul Rohorzka
' Date      : 17.01.2012
' Purpose   : AccUnit Tests for clsLogger
'---------------------------------------------------------------------------------------

Option Compare Text
Option Explicit

'AccUnit:TestClass

Private objLogger     As clsLogger
Private objLogSaver1  As clsLogSaver_Mock

Private lDuration   As Long
Private lBase       As Currency
Private l           As Long

Private Const ONE_SECOND As Double = 1 / 24 / 60 / 60 ' TimeSerial(0, 0, Second:=1)
Private Const LOOPS = 10000

Implements SimplyVBUnit.ITestFixture
Implements AccUnit_Integration.ITestManagerBridge
Private TestManager As AccUnit_Integration.TestManager
Private Sub ITestManagerBridge_InitTestManager(ByVal NewTestManager As AccUnit_Integration.ITestManagerComInterface): Set TestManager = NewTestManager: End Sub
Private Function ITestManagerBridge_GetTestManager() As AccUnit_Integration.ITestManagerComInterface: Set ITestManagerBridge_GetTestManager = TestManager: End Function
Private Sub ITestFixture_AddTestCases(ByVal Tests As SimplyVBUnit.TestCaseCollector): TestManager.AddTestCases Tests: End Sub

' ---  Infrastructure ---

Public Sub Setup()

   Set objLogger = Logger.Log             ' New clsLogger
   objLogger.Enabled = True
   
   Logger.LogSaver.KillAll
   
   Set objLogSaver1 = Logger.LogSaver.Mock
   objLogSaver1.StartLog
   
End Sub

Public Sub Teardown()
  Set objLogger = Nothing
  Set objLogSaver1 = Nothing
End Sub



' ----   Tests -----

Public Sub Log_WithASimpleText_LogsThatText()
  'Act
  objLogger.Message "HAllo Welt"
  
  ' Assert
  Assert.That objLogSaver1.LoggedCount, Iz.EqualTo(1), "Has a message"
  Assert.That objLogSaver1.LastEntry.MessageText(), Iz.EqualTo("HAllo Welt")
End Sub

Public Sub Log_WithAnyText_LogsATimeStamp()
  Dim result As Date
  
  'Act
  objLogger.Message "Dummy"

  ' Assert
  result = objLogSaver1.LastEntry.TimeStamp.ToDateWithTime()
  Assert.That result, Iz.EqualTo(Now).Within(ONE_SECOND)

End Sub

Public Sub Log_WithSimpleTextAndWrongFilter_DoesNotLogThatText()
  Dim result As String
  ' Arrange
  objLogSaver1.AddFilter Logger.LogFilter.WithMessageText(Contains, "Dummy")
  
  'Act
  objLogger.Message "HAllo Welt"
  
  ' Assert
  Assert.IsNothing objLogSaver1.LastEntry

End Sub

Public Sub Log_WithFilter_OnlyLogsMatchingEvents()

  ' Arrange
  objLogSaver1.AddFilter Logger.LogFilter.WithMessageText(Contains, "HAllo Welt")
  
  'Act
  objLogger.Message "HAllo Welt"
  objLogger.Message "Dummy"
  
  ' Assert
  Assert.That objLogSaver1.LastEntry.MessageText(), Iz.EqualTo("HAllo Welt")
  Assert.That objLogSaver1.LoggedCount, Iz.EqualTo(1)

End Sub



' ------- Performance Tests --------------

Public Sub Log_Base_Performance()
  Const MAX_TIME = 5 ' ms   ( 2,7 ms on a Intel Core i7-2600K 3,4 GHz )
  
  ' Arrange
  objLogSaver1.StopLog
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      DoNothing "HAllo Welt"
    Next
    lDuration = .Elapsedms
  End With
  
  lBase = lDuration
  Debug.Print "Base: " & Int(LOOPS / (lDuration / 1000#)) & " Logs/Sec"
  Assert.That lDuration, Iz.LessThan(MAX_TIME), "Duration"
End Sub

Public Sub Log_WithDisabledLogger_Performance()
  Const MAX_TIME = 300 ' ms   ( 101 ms on a Intel Core i7-2600K 3,4 GHz )
  Const MAX_OVERHEAD = 5000 ' %
  
  ' Arrange
  objLogSaver1.StopLog
  
  objLogger.Enabled = False
  With Utils.StopWatch
    For l = 1 To LOOPS
      objLogger.Message "HAllo Welt"
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "WithDisabledLogger: " & Int(LOOPS / (lDuration / 1000#)) & " Logs/Sec"
  Assert.That lDuration, Iz.LessThan(MAX_TIME), "Duration"
  If lBase > 0 Then Assert.That (lDuration / lBase * 100), Iz.LessThan(MAX_OVERHEAD), "Overhead of " & Int(lDuration / lBase * 100) & "%"
End Sub

Public Sub Log_WithoutAnyLogSaver_Performance()
  Const MAX_TIME = 300 ' ms   ( 101 ms on a Intel Core i7-2600K 3,4 GHz )
  Const MAX_OVERHEAD = 5000 ' %
  
  ' Arrange
  objLogSaver1.StopLog
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      objLogger.Message "HAllo Welt"
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "WithoutLogSaver: " & Int(LOOPS / (lDuration / 1000#)) & " Logs/Sec"
  Assert.That lDuration, Iz.LessThan(MAX_TIME), "Duration"
  If lBase > 0 Then Assert.That (lDuration / lBase * 100), Iz.LessThan(MAX_OVERHEAD), "Overhead of " & Int(lDuration / lBase * 100) & "%"
End Sub


Public Sub Log_WithFilterAndMocker_Performance()
  Const MAX_TIME = 250 ' ms   ( 192 ms on a Intel Core i7-2600K 3,4 GHz )
  Const MAX_OVERHEAD = 10000 ' %
  
  ' Arrange
  objLogSaver1.AddFilter Logger.LogFilter.WithMessageText(Contains, "HAllo Welt")
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      objLogger.Message "HAllo Welt"
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "WithFilterAndMocker: " & Int(LOOPS / (lDuration / 1000#)) & " Logs/Sec"
  Assert.That objLogSaver1.LoggedCount, Iz.EqualTo(LOOPS)
  Assert.That lDuration, Iz.LessThan(MAX_TIME), "Duration"
  If lBase > 0 Then Assert.That (lDuration / lBase * 100), Iz.LessThan(MAX_OVERHEAD), "Overhead of " & Int(lDuration / lBase * 100) & "%"
End Sub


Public Sub Log_WithFilterAndMockerAndTextLogger_Performance()
  Const MAX_TIME = 6000 ' ms   ( 5895 ms on a Intel Core i7-2600K 3,4 GHz )
  Const MAX_OVERHEAD = 70000 ' %
  
  Dim objLogFile  As clsLogSaver_File
  
  ' Arrange
  objLogSaver1.AddFilter Logger.LogFilter.WithMessageText(Contains, "HAllo Welt")
  
  Set objLogFile = Logger.LogSaver.File
  objLogFile.Name = "NUL"
  
  Call objLogFile.AddFilter(Logger.LogFilter.WithMessageText(Contains, "HAllo Welt")).StartLog
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      objLogger.Error "Test", Me, "Log_WithFilterAndMockerAndTextLogger_Performance", l, "HAllo Welt"
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "WithFilterAndMockerAndTextLogger: " & Int(LOOPS / (lDuration / 1000#)) & " Logs/Sec"
  Assert.That objLogSaver1.LoggedCount, Iz.EqualTo(LOOPS)
  Assert.That lDuration, Iz.LessThan(MAX_TIME), "Duration"
  If lBase > 0 Then Assert.That (lDuration / lBase * 100), Iz.LessThan(MAX_OVERHEAD), "Overhead of " & Int(lDuration / lBase * 100) & "%"
End Sub


Public Sub Log_With7ActiveLoggerAndNoMatchingFilter_Performance()
  Const MAX_TIME = 400 ' ms   ( 380 ms on a Intel Core i7-2600K 3,4 GHz )
  Const MAX_OVERHEAD = 16000 ' %
  
  Dim objLogCons   As clsLogSaver_Console
  Dim objLogFile1  As clsLogSaver_File
  Dim objLogFile2  As clsLogSaver_File
  Dim objLogFile3  As clsLogSaver_File
  Dim objLogFile4  As clsLogSaver_File
  Dim objLogFile5  As clsLogSaver_File
  
  Dim objLogFilter As clsLogFilter
  
  ' Arrange
  Set objLogFilter = Logger.LogFilter.WithMessageText(Contains, "HAllo Welt").WithMessageNumber(EqualTo, 1234).WithSeverity(Sev_Critical)
  
  Set objLogCons = Logger.LogSaver.Console
  Set objLogFile1 = Logger.LogSaver.File
  Set objLogFile2 = Logger.LogSaver.File
  Set objLogFile3 = Logger.LogSaver.File
  Set objLogFile4 = Logger.LogSaver.File
  Set objLogFile5 = Logger.LogSaver.File
  
  objLogSaver1.AddFilter objLogFilter
  
  objLogCons.AddFilter objLogFilter
  objLogFile1.AddFilter objLogFilter
  objLogFile2.AddFilter objLogFilter
  objLogFile3.AddFilter objLogFilter
  objLogFile4.AddFilter objLogFilter
  objLogFile5.AddFilter objLogFilter
  
  Logger.LogSaver.StartAll
  
  With Utils.StopWatch
    For l = 1 To LOOPS
      objLogger.Error "Test", "Dummy", "Dummy", l, "Dummy"
    Next
    lDuration = .Elapsedms
  End With
  
  Debug.Print "With7ActiveLoggerAndNoMatchingFilter: " & Int(LOOPS / (lDuration / 1000#)) & " Logs/Sec"
  Assert.That objLogSaver1.LoggedCount, Iz.EqualTo(0)
  Assert.That lDuration, Iz.LessThan(MAX_TIME), "Duration"
  If lBase > 0 Then Assert.That (lDuration / lBase * 100), Iz.LessThan(MAX_OVERHEAD), "Overhead of " & (lDuration / lBase * 100) & "%"
End Sub


' ----------------------------------------------------------------------------------------

Private Sub DoNothing(ByVal s As String)
  Dim x As String
  x = s
End Sub