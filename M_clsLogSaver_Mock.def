Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : clsLogSaver_Mock
' Author    : K.Gundermann
' Date      : 17.01.2012
' Purpose   : Saves the last Logger Event ( used as Mock Object in AccUnit Tests )
'---------------------------------------------------------------------------------------

Option Compare Database
Option Explicit

Private c_LastEntry As clsLogEntry
Private c_LoggedCount As Long

Implements ILogSaver

Private WithEvents c_Logger   As clsLogger
Attribute c_Logger.VB_VarHelpID = -1
Private WithEvents c_Session  As clsLogSession
Attribute c_Session.VB_VarHelpID = -1
Private c_Filters             As clsLogFilterCollection

Private c_Name                As String


Private Sub Class_Initialize()
  Set c_Session = Logger.Log.Session
  Set c_Filters = New clsLogFilterCollection
End Sub
Private Sub Class_Terminate()
  Call StopLog
End Sub


' --- Public Interface ---
Public Sub StartLog()
  Set c_Logger = Logger.Log
End Sub

Public Sub StopLog()
  Set c_Logger = Nothing
End Sub

Public Sub SaveToLog(ByRef objLogEntry As clsLogEntry)
  If Filters.MatchFilter(objLogEntry) Then
    Call SaveToMyLog(objLogEntry)
  End If
End Sub

Public Function AddFilter(ByVal TheFilter As clsLogFilter) As ILogSaver
  Filters.AddFilter TheFilter
  Set AddFilter = Me
End Function

Public Property Get ID() As Long
  ID = ObjPtr(Me)
End Property
Public Property Get Name() As String
  If c_Name = vbNullString Then
    Name = TypeName(Me)
  Else
    Name = c_Name
  End If
End Property
Public Property Let Name(ByVal TheName As String)
  c_Name = TheName
End Property


' --- Private Functions ---
Private Property Get Filters() As clsLogFilterCollection
  Set Filters = c_Filters
End Property

' --- Event Handler for Logger/Session Class ---
Private Sub c_Logger_SaveToLog(objLogEntry As clsLogEntry)
  Call Me.SaveToLog(objLogEntry)
End Sub

Private Sub c_Session_Login()
  ' ToDo: We have now a logged In User
End Sub

Private Sub c_Session_Logout()
  ' ToDo: The user has logged out
End Sub

' --- Implements ILogSaver ---
Private Sub ILogSaver_StartLog()
  Me.StartLog
End Sub
Private Sub ILogSaver_StopLog()
  Me.StopLog
End Sub
Private Function ILogSaver_AddFilter(ByVal TheFilter As clsLogFilter) As ILogSaver
  Set ILogSaver_AddFilter = Me.AddFilter(TheFilter)
End Function
Private Property Get ILogSaver_ID() As Long
  ILogSaver_ID = Me.ID
End Property
Private Property Get ILogSaver_Name() As String
  ILogSaver_Name = Me.Name
End Property
Private Property Let ILogSaver_Name(ByVal TheName As String)
  Me.Name = TheName
End Property
Private Sub ILogSaver_SaveToLog(objLogEntry As clsLogEntry)
  Call Me.SaveToLog(objLogEntry)
End Sub





' ---------------------------------------------------------------------------------
' -- Specific Functions for that logger here

Public Sub SaveToMyLog(ByRef objLogEntry As clsLogEntry)
  ' ToDo: Implement your functionality here
  Set c_LastEntry = objLogEntry.Clone
  c_LoggedCount = c_LoggedCount + 1
End Sub


Friend Property Get LastEntry() As clsLogEntry
  Set LastEntry = c_LastEntry
End Property

Friend Property Get LoggedCount() As Long
  LoggedCount = c_LoggedCount
End Property