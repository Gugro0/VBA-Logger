Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : clsLogSaver_EMail_SMTP
' Author    : K.Gundermann
' Date      : 17.01.2012
' Purpose   : Sends Logger Events to a EMail Recipient using SMTP
' Remark    : needs Microsoft CDO for Windows 2000 Library
'---------------------------------------------------------------------------------------

Option Compare Database
Option Explicit

#Const SMTP = 1

Implements ILogSaver

Private WithEvents c_Logger   As clsLogger
Attribute c_Logger.VB_VarHelpID = -1
Private WithEvents c_Session  As clsLogSession
Attribute c_Session.VB_VarHelpID = -1
Private c_Filters             As clsLogFilterCollection

Const cdoSendUsingPickup = 1
Const cdoSendUsingPort = 2

Public Enum e_CDOAuthentication
  cdoAnonymous = 0
  cdoBasic = 1            ' Use basic (clear-text) authentication.
  cdoNTLM = 2             ' Use NTLM authentication
End Enum

Private c_Name                As String

Private c_Servername    As String
Private c_Username      As String
Private c_UserPassword  As String

Private c_EMailSender   As String
Private c_EmailTo       As String
Private c_EMailSubject  As String

Private c_Authentication As e_CDOAuthentication

Private Sub Class_Initialize()
  Set c_Session = Logger.Log.Session
  Set c_Filters = New clsLogFilterCollection
End Sub
Private Sub Class_Terminate()
  Call StopLog
End Sub


' --- Public Interface ---
Public Sub StartLog()
  Set c_Logger = Logger.Log
End Sub

Public Sub StopLog()
  Set c_Logger = Nothing
End Sub

Public Sub SaveToLog(ByRef objLogEntry As clsLogEntry)
  If Filters.MatchFilter(objLogEntry) Then
    Call SaveToMyLog(objLogEntry)
  End If
End Sub

Public Function AddFilter(ByVal TheFilter As clsLogFilter) As ILogSaver
  Filters.AddFilter TheFilter
  Set AddFilter = Me
End Function

Public Property Get ID() As Long
  ID = ObjPtr(Me)
End Property
Public Property Get Name() As String
  If c_Name = vbNullString Then
    Name = TypeName(Me)
  Else
    Name = c_Name
  End If
End Property
Public Property Let Name(ByVal TheName As String)
  c_Name = TheName
End Property


' --- Private Functions ---
Private Property Get Filters() As clsLogFilterCollection
  Set Filters = c_Filters
End Property

' --- Event Handler for Logger/Session Class ---
Private Sub c_Logger_SaveToLog(objLogEntry As clsLogEntry)
  Call Me.SaveToLog(objLogEntry)
End Sub

Private Sub c_Session_Login()
  ' ToDo: We have now a logged In User
End Sub

Private Sub c_Session_Logout()
  ' ToDo: The user has logged out
End Sub

' --- Implements ILogSaver ---
Private Sub ILogSaver_StartLog()
  Me.StartLog
End Sub
Private Sub ILogSaver_StopLog()
  Me.StopLog
End Sub
Private Function ILogSaver_AddFilter(ByVal TheFilter As clsLogFilter) As ILogSaver
  Set ILogSaver_AddFilter = Me.AddFilter(TheFilter)
End Function
Private Property Get ILogSaver_ID() As Long
  ILogSaver_ID = Me.ID
End Property
Private Property Get ILogSaver_Name() As String
  ILogSaver_Name = Me.Name
End Property
Private Property Let ILogSaver_Name(ByVal TheName As String)
  Me.Name = TheName
End Property
Private Sub ILogSaver_SaveToLog(objLogEntry As clsLogEntry)
  Call Me.SaveToLog(objLogEntry)
End Sub


' ---------------------------------------------------------------------------------
' -- Specific Functions for that logger here


Public Property Get Servername() As String
  Servername = c_Servername
End Property
Public Property Let Servername(ByVal TheValue As String)
  c_Servername = TheValue
End Property

Public Property Get Username() As String
  Username = c_Username
End Property
Public Property Let Username(ByVal TheValue As String)
  c_Username = TheValue
End Property


Public Property Get UserPassword() As String
  UserPassword = c_UserPassword
End Property
Public Property Let UserPassword(ByVal TheValue As String)
  c_UserPassword = TheValue
End Property


Public Property Get EMailSender() As String
  If IsNullString(c_EMailSender) Then
    EMailSender = "Logger@Somewhere.com"
  Else
    EMailSender = c_EMailSender
  End If
End Property
Public Property Let EMailSender(ByVal TheValue As String)
  c_EMailSender = TheValue
End Property


Public Property Get EmailTo() As String
  EmailTo = c_EmailTo
End Property
Public Property Let EmailTo(ByVal TheReceiver As String)
  c_EmailTo = TheReceiver
End Property

Public Property Get EMailSubject() As String
  If IsNullString(c_EMailSubject) Then
    EMailSubject = TypeName(Me)
  Else
    EMailSubject = c_EMailSubject
  End If
End Property
Public Property Let EMailSubject(ByVal TheSubject As String)
  c_EMailSubject = TheSubject
End Property

Public Property Get Authentication() As e_CDOAuthentication
  Authentication = c_Authentication
End Property
Public Property Let Authentication(ByVal TheValue As e_CDOAuthentication)
  c_Authentication = TheValue
End Property



Private Sub SendMail(ByVal TheMessage As String)

#If SMTP Then
    Dim imsg  As CDO.Message         '    Object
    Dim iconf As CDO.Configuration  ' Object
    Dim flds  As Object  ' ADODB.Fields ???
    Dim schema As String

    On Error GoTo SendMail_Error
      Set imsg = CreateObject("CDO.Message")
    On Error GoTo 0
    Set iconf = CreateObject("CDO.Configuration")
    Set flds = iconf.Fields

    ' send one copy with SMTP server (with autentication)
    schema = "http://schemas.microsoft.com/cdo/configuration/"
    flds.Item(schema & "sendusing") = cdoSendUsingPort
    flds.Item(schema & "smtpserver") = Me.Servername
    flds.Item(schema & "smtpserverport") = 25
    flds.Item(schema & "smtpauthenticate") = Me.Authentication
    flds.Item(schema & "sendusername") = Me.Username
    flds.Item(schema & "sendpassword") = Me.UserPassword
    flds.Item(schema & "smtpusessl") = False
    flds.Update

    With imsg
        .To = Me.EmailTo
        .From = Me.EMailSender
        .Subject = Me.EMailSubject
        .TextBody = TheMessage
        Set .Configuration = iconf
        .Send
    End With

    Set iconf = Nothing
    Set imsg = Nothing
    Set flds = Nothing

   On Error GoTo 0
   Exit Sub
#Else
  Err.Raise vbObjectError, , "SMTP Integration is not enabled in this App!"
#End If

SendMail_Error:

  MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure SendMail of Klassenmodul clsLogSaver_EMail_SMTP"
End Sub

Private Function LogEntry2String(ByVal objLogEntry As clsLogEntry) As String
  LogEntry2String = Logger.Log.Session.ToString & vbCrLf & objLogEntry.ToString
End Function


Private Sub SaveToMyLog(ByRef objLogEntry As clsLogEntry)
  SendMail LogEntry2String(objLogEntry)
End Sub